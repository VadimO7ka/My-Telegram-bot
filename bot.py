# bot.py
import logging
import os
from dotenv import load_dotenv
from datetime import datetime, timezone, timedelta
from dateutil import parser
import requests

from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    CallbackQueryHandler,
    ContextTypes,
)

# –∏–º–ø–æ—Ä—Ç —Ç–≤–æ–∏—Ö –º–æ–¥—É–ª–µ–π (–ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞—é, –æ–Ω–∏ –µ—Å—Ç—å –ø–æ-–ø—Ä–µ–∂–Ω–µ–º—É)
from db import init_db, get_due_reminders, mark_reminder_inactive, update_reminder_next
from handlers.commands import start, help_command, set_tz_command
from handlers.callback_handlers import callback_router
from handlers.reminders import text_handler

# load .env
load_dotenv()
TOKEN = os.getenv("TG_TOKEN")
CHECK_INTERVAL = int(os.getenv("CHECK_INTERVAL", "60"))

if not TOKEN:
    raise ValueError("–û—à–∏–±–∫–∞: TG_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å .env")

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


async def job_check_reminders(context: ContextTypes.DEFAULT_TYPE):
    now = datetime.utcnow().replace(tzinfo=timezone.utc).isoformat(sep=' ')
    try:
        due = get_due_reminders(now)  # –æ–∂–∏–¥–∞–µ—Ç —Å–ø–∏—Å–æ–∫ (id, tg_id, text, remind_at, repeat)
    except Exception:
        logger.exception("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–±–æ—Ä–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏–∑ –ë–î")
        return

    for rid, tg_id, text, remind_at, repeat in due:
        try:
            await context.bot.send_message(chat_id=tg_id, text=f"üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ: {text}")
            if repeat:
                if repeat == "daily":
                    dt = parser.parse(remind_at)
                    next_dt = dt + timedelta(days=1)
                    update_reminder_next(rid, next_dt.astimezone(timezone.utc).isoformat(sep=' '))
                else:
                    mark_reminder_inactive(rid)
            else:
                mark_reminder_inactive(rid)
        except Exception:
            logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ id=%s –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é %s", rid, tg_id)


def delete_webhook_sync(token: str):
    """–£–¥–∞–ª—è–µ–º webhook —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —á–µ—Ä–µ–∑ HTTP, —á—Ç–æ–±—ã –Ω–µ –∂–¥–∞—Ç—å await."""
    try:
        url = f"https://api.telegram.org/bot{token}/deleteWebhook"
        # –ø–∞—Ä–∞–º–µ—Ç—Ä drop_pending_updates –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞—Ç—å –≤ JSON –∏–ª–∏ –∫–∞–∫ –ø–∞—Ä–∞–º–µ—Ç—Ä
        resp = requests.post(url, json={"drop_pending_updates": True}, timeout=10)
        if resp.ok:
            logger.info("Webhook –æ—á–∏—â–µ–Ω (sync HTTP).")
        else:
            logger.warning("–û—Ç–≤–µ—Ç –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: %s %s", resp.status_code, resp.text)
    except Exception:
        logger.exception("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ —É–¥–∞–ª–∏—Ç—å webhook (–Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞—é).")

def main():
    # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π webhook –¥–æ —Å–æ–∑–¥–∞–Ω–∏—è Application (—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
    delete_webhook_sync(TOKEN)

    init_db()

    app = ApplicationBuilder().token(TOKEN).build()

    # handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("settz", set_tz_command))
    app.add_handler(CallbackQueryHandler(callback_router))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    # background job
    app.job_queue.run_repeating(job_check_reminders, interval=CHECK_INTERVAL, first=10)

    logger.info("–ó–∞–ø—É—Å–∫–∞—é –±–æ—Ç–∞ ‚Äî app.run_polling() (Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏)...")
    # –ó–∞–ø—É—Å–∫ polling (–±–ª–æ–∫–∏—Ä—É—é—â–∏–π) ‚Äî –±–∏–±–ª–∏–æ—Ç–µ–∫–∞ —Å–∞–º–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç event loop
    app.run_polling()


if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        logger.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã (Ctrl+C).")
    except Exception:
        logger.exception("–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Ü–∏–∫–ª–µ.")
